steps:
  - name: "node:20-alpine"
    entrypoint: "sh"
    args:
      - "-c"
      - |
        corepack enable && \
        corepack prepare pnpm@9.15.2 --activate && \
        pnpm install --frozen-lockfile --prefer-offline
    id: "install-deps"

  - name: "node:20-alpine"
    entrypoint: "sh"
    args:
      - "-c"
      - |
        corepack enable && \
        corepack prepare pnpm@9.15.2 --activate && \
        pnpm test -- --passWithNoTests --watchAll=false --coverage=false --testPathPatterns="(critical|integration|radar.*bug)" --maxWorkers=2
    waitFor: ["install-deps"]
    id: "run-tests"

  - name: "node:20-alpine"
    entrypoint: "sh"
    args:
      - "-c"
      - |
        apk add --no-cache git
        
        CURRENT_VERSION=$$(node -p "require('./package.json').version")
        echo "Current package.json version: $$CURRENT_VERSION"
        
        LAST_PROD_TAG=$$(git tag --list | grep "^prod-" | sort -V | tail -1)
        
        if [ -z "$$LAST_PROD_TAG" ]; then
          echo "No previous production tags found. First deployment!"
          DEPLOY_NEEDED=true
        else
          echo "Last production tag: $$LAST_PROD_TAG"
          LAST_VERSION=$$(echo "$$LAST_PROD_TAG" | sed -E 's/prod-([0-9]+\.[0-9]+\.[0-9]+)-.*/\1/')
          echo "Last deployed version: $$LAST_VERSION"
          
          if [ "$$CURRENT_VERSION" != "$$LAST_VERSION" ]; then
            echo "✅ Version changed from $$LAST_VERSION to $$CURRENT_VERSION - Deploy approved!"
            DEPLOY_NEEDED=true
          else
            echo "❌ Version unchanged ($$CURRENT_VERSION) - Deploy skipped!"
            DEPLOY_NEEDED=false
          fi
        fi
        
        if [ "$$DEPLOY_NEEDED" = "true" ]; then
          TIMESTAMP=$$(date +%Y%m%d-%H%M%S)
          NEW_TAG="prod-$$CURRENT_VERSION-$$TIMESTAMP"
          
          git config --global user.email "cloudbuild@datario.com"
          git config --global user.name "Cloud Build"
          git tag -a "$$NEW_TAG" -m "Production release v$$CURRENT_VERSION - $$(date +%Y-%m-%d %H:%M:%S)"
          git push origin "$$NEW_TAG"
          
          echo "$$NEW_TAG" > /workspace/version_tag.txt
          echo "🏷️  Created production tag: $$NEW_TAG"
        else
          echo "💡 To deploy, update version in package.json (npm version patch/minor/major)"
          exit 1
        fi
    waitFor: ["install-deps"]
    id: "version-check"

  - name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        echo "NEXT_PUBLIC_CIVITAS_API_URL=https://api.civitas.rio" > .env.production && \
        echo "NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN=pk.eyJ1IjoiZXNjcml0b3Jpb2RlZGFkb3MiLCJhIjoiY2t3bWdmcHpjMmJ2cTJucWJ4MGQ1Mm1kbiJ9.4hHJX-1pSevYoBbja7Pq4w" >> .env.production && \
        echo "NEXT_PUBLIC_VISION_AI_URL=http://app.dados.rio/vision-ai" >> .env.production
    waitFor: ["-"]
    id: "create-env"

  - name: "gcr.io/cloud-builders/docker"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        VERSION_TAG=$$(cat /workspace/version_tag.txt)
        PACKAGE_VERSION=$$(node -p "require('./package.json').version")
        docker build \
          --cache-from gcr.io/$PROJECT_ID/civitas:latest \
          -t gcr.io/$PROJECT_ID/civitas:$COMMIT_SHA \
          -t gcr.io/$PROJECT_ID/civitas:latest \
          -t gcr.io/$PROJECT_ID/civitas:$$VERSION_TAG \
          -t gcr.io/$PROJECT_ID/civitas:v$$PACKAGE_VERSION \
          .
    waitFor: ["run-tests", "version-check", "create-env"]

  - name: "gcr.io/cloud-builders/docker"
    args: ["push", "gcr.io/$PROJECT_ID/civitas:$COMMIT_SHA"]
  - name: "gcr.io/cloud-builders/docker"
    args: ["push", "gcr.io/$PROJECT_ID/civitas:latest"]
  - name: "gcr.io/cloud-builders/docker"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        VERSION_TAG=$$(cat /workspace/version_tag.txt)
        PACKAGE_VERSION=$$(node -p "require('./package.json').version")
        docker push gcr.io/$PROJECT_ID/civitas:$$VERSION_TAG
        docker push gcr.io/$PROJECT_ID/civitas:v$$PACKAGE_VERSION

  - name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        VERSION_TAG=$$(cat /workspace/version_tag.txt)
        PACKAGE_VERSION=$$(node -p "require('./package.json').version")
        TIMESTAMP=$$(date +%Y-%m-%d\ %H:%M:%S)
        echo "Deployment Info:" > deployment-info.txt && \
        echo "Timestamp: $$TIMESTAMP" >> deployment-info.txt && \
        echo "Commit SHA: $COMMIT_SHA" >> deployment-info.txt && \
        echo "Package Version: $$PACKAGE_VERSION" >> deployment-info.txt && \
        echo "Version Tag: $$VERSION_TAG" >> deployment-info.txt && \
        echo "Simple Version Tag: v$$PACKAGE_VERSION" >> deployment-info.txt && \
        echo "Image Tag: gcr.io/$PROJECT_ID/civitas:$COMMIT_SHA" >> deployment-info.txt && \
        echo "Branch: $BRANCH_NAME" >> deployment-info.txt && \
        gsutil cp deployment-info.txt gs://$PROJECT_ID-deployments/prod/deployment-info-$$VERSION_TAG.txt

  - name: "gcr.io/cloud-builders/gke-deploy"
    dir: "k8s/prod"
    entrypoint: "kustomize"
    args:
      - "edit"
      - "set"
      - "image"
      - "gcr.io/project-id/civitas=gcr.io/$PROJECT_ID/civitas:$COMMIT_SHA"

  - name: "gcr.io/cloud-builders/gke-deploy"
    dir: "k8s/prod"
    entrypoint: "kustomize"
    args: ["build", ".", "-o", "prod.yaml"]

  - name: "gcr.io/cloud-builders/gke-deploy"
    dir: "k8s/prod"
    args:
      - "run"
      - "--filename=prod.yaml"
      - "--location=us-central1"
      - "--cluster=datario"
      - "--project=datario"

  - name: "gcr.io/cloud-builders/curl"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        echo "Waiting for deployment to be ready..." && \
        sleep 30 && \
        curl -f https://civitas.rio/health || echo "Health check failed, but deployment completed"

images:
  - "gcr.io/$PROJECT_ID/civitas:$COMMIT_SHA"
  - "gcr.io/$PROJECT_ID/civitas:latest"

artifacts:
  objects:
    location: "gs://$PROJECT_ID-deployments/prod/"
    paths: ["deployment-info.txt"]

options:
  logging: CLOUD_LOGGING_ONLY
