import { test, expect } from '@playwright/test'

test.describe('Bug de Sele√ß√£o de Radares com Auth Real', () => {
  test('deve permitir login e testar o bug de ressele√ß√£o autom√°tica', async ({ page }) => {
    console.log('üß™ Iniciando teste com autentica√ß√£o real')

    // Navegar para a p√°gina de login
    await page.goto('http://localhost:3000/auth/sign-in')
    await page.waitForLoadState('networkidle')

    // Screenshot da tela de login
    await page.screenshot({ 
      path: './e2e-results/login-page.png', 
      fullPage: true 
    })

    // Fazer login com as credenciais de teste
    const userInput = page.locator('input[type="text"]').first()
    const passwordInput = page.locator('input[type="password"]').first()
    const loginButton = page.locator('button:has-text("Login")').first()

    await userInput.fill(process.env.TEST_USER || '15164636760')
    await passwordInput.fill(process.env.TEST_PASSWORD || 'sy45hsSoiOCf5WkLIB2dNhIv2nIruuPPgyGPDaNoC4hWrcooQCxKhqiyU4MG')
    
    await loginButton.click()

    // Aguardar redirecionamento ap√≥s login
    await page.waitForLoadState('networkidle')
    await page.waitForTimeout(2000)

    console.log('‚úÖ Login realizado, navegando para URL com radares')

    // Navegar para a URL espec√≠fica com radares pr√©-selecionados
    const testUrl = 'http://localhost:3000/veiculos/busca-por-radar/resultado?startDate=2025-09-10T08%3A43%3A00.000Z&endDate=2025-09-10T13%3A43%3A00.000Z&radarIds=0530041121&radarIds=0530031111&radarIds=0530031112&radarIds=0530041122'
    
    await page.goto(testUrl)
    await page.waitForLoadState('networkidle')
    await page.waitForTimeout(3000) // Aguardar carregamento dos dados

    // Screenshot da p√°gina de resultados
    await page.screenshot({ 
      path: './e2e-results/results-page-loaded.png', 
      fullPage: true 
    })

    console.log('üìã Procurando filtros de radar na p√°gina')

    // Procurar pelo filtro de radares (MultiSelectWithSearch)
    const radarFilter = page.locator('button:has-text("radar"), button:has-text("Radar"), button:has-text("Selecione um radar")').first()
    
    if (await radarFilter.isVisible()) {
      console.log('üéØ Filtro de radar encontrado!')
      
      // Clicar no filtro de radares para abrir
      await radarFilter.click()
      await page.waitForTimeout(500)

      // Screenshot do filtro aberto
      await page.screenshot({ 
        path: './e2e-results/filter-opened.png', 
        fullPage: true 
      })

      // Procurar pelo bot√£o "Limpar" ou "Clear"
      const clearButton = page.locator('text=Limpar, text=Clear, button:has-text("Limpar")').first()
      
      if (await clearButton.isVisible()) {
        console.log('‚ùå Clicando em Limpar para remover todos os radares')
        await clearButton.click()
        await page.waitForTimeout(1000)

        // Fechar o popover
        const closeButton = page.locator('text=Fechar, button:has-text("Fechar")').first()
        if (await closeButton.isVisible()) {
          await closeButton.click()
        }

        await page.waitForTimeout(1000)

        // Screenshot ap√≥s limpar
        await page.screenshot({ 
          path: './e2e-results/after-clear.png', 
          fullPage: true 
        })

        // Aguardar um tempo para ver se os radares voltam automaticamente
        console.log('‚è∞ Aguardando para verificar se radares voltam automaticamente...')
        await page.waitForTimeout(2000)

        // Screenshot final
        await page.screenshot({ 
          path: './e2e-results/final-state.png', 
          fullPage: true 
        })

        // Verificar se o filtro ainda mostra "Selecione um radar" (vazio)
        const filterText = await radarFilter.textContent()
        console.log(`üîç Texto do filtro ap√≥s limpeza: "${filterText}"`)
        
        // Se cont√©m "Selecione um radar", significa que est√° vazio (correto)
        // Se cont√©m c√≥digos de radar, significa que o bug ainda existe
        expect(filterText).toContain('Selecione um radar')

        console.log('‚úÖ Bug corrigido: Filtro permanece vazio ap√≥s limpeza')
      } else {
        console.log('‚ùå Bot√£o Limpar n√£o encontrado')
      }
    } else {
      console.log('‚ùå Filtro de radar n√£o encontrado')
      
      // Listar todos os elementos dispon√≠veis para debug
      const allButtons = await page.locator('button').allTextContents()
      console.log('üîç Bot√µes encontrados:', allButtons)
    }
  })
})